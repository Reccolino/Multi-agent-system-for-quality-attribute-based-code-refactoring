task1:
    #PER LA RQ2 DEVO CAMBIARE QUI E BACKSTORY AGENT, PER FAR SI CHE SI SPECIALIZZI PIU SU UN ATTRIBUTO
    description: |
        You are MasterPrompt, a Security-Focused Static Code Analysis Expert. 
        Analyze the following Java source code:
        {code_class}
        Then create a precise and comprehensive prompt that 
        instructs an AI system or automated tool to evaluate source code, focusing on backstory of agent and, if possible, on:
        1. **Leverage SonarQube Quality Attributes**  
           - Examine Reliability, Security, Maintainability, Duplications and prioritize them metrics as 
             Vulnerabilities, Bugs and Code Smells.  
           - Bad Practices (e.g., duplicated code, improper naming, code smells)
           - Correctness (compliance with style and logic rules)
           - Critical And Blocker Issues 
        2. **Integrate Java Static-Analysis Plugins**  
           - Instruct how to run Checkstyle rules for naming conventions and style consistency.  
           - Include PMD scans for bug patterns (unused variables, inefficient loops, null‐dereferences).  
           - Include FindBugs (SpotBugs) checks for bytecode-level security defects (e.g., null‐pointer dereference, SQL injection annotations).
        4. **Suggest Concrete Remediation Steps**  
           - Propose secure coding best practices (input validation, prepared statements, safe deserialization).  
        5. **Format and Output**  
           - The final output must be a single, clear prompt (in English) that can be provided verbatim to another AI model.  
           - Do not include code modifications yourself—only craft the instructions.  

    expected_output: |
      A single, self-contained English prompt that:
      - Clearly tells an AI agent how to run SonarQube and Java plugin scans (Checkstyle, PMD, FindBugs).  
      - Guides the AI to identify bad practices, code smells, style/logic inconsistencies, and critical security flaws (OWASP Top 10).  
      - Instructs the AI on remediation actions (secure APIs, input sanitization, configuration fixes, writing tests).  

    agent: query_writer



task2:

    description: |
        You are MasterJava, a Java Code Refactoring Expert. 
        Refactor the {code_class}, using ONLY the prompt produced in task1 as guidance and absolutely according to these rules:
          1. **Preserve Structure: (IT'S IMPORTANT !!)**  
             - Keep ALL class and method names exactly as originally defined, including constructors and overloads.  
             - Retain ALL the original package declaration and ALL import statements.  
             - Do not change method signatures, parameter lists, return types.
             - Ensure that for every refactored method or class, the original logic and behavior remain identical (input → output). 
             - Preserve any license header if present. If no license is found in the original, do not add one.
             - Do not alter inheritance hierarchies, implemented interfaces, abstract class extensions, or annotations that affect class loading/behavior.
        
          2. **Changes:**  
             - Be AGGRESSIVE on code refactoring, following the prompt in task1 as refactoring rules
             - I want that you resolve the most problems of the code following context from task1
             - Only refactor code that directly addresses issues highlighted in the context from task1.  
             - Do not introduce any new compilation or runtime {errors}.  
             - Do not add test cases.
             - Add comments or a header at the top of the file when appropriate, if necessary.

    expected_output: >
         Return only the full raw content of the .java file WITHOUT include ```java or ``` in the begin of Java file or other markdown.

    agent: code_refactor

    context:
      - task1




task3:
    description: >
            Do a code replace in: {path_class} using the refactored code from the previous task.

    expected_output: >
            If the code replacement was successful.
    context:
      - task2
    agent: code_replacer



task4:
   description: >
        Execute terminal commands passing the {path_class} to the SonarScanner tool.

   expected_output: |
        If the scanner completed successfully, without returning code or errors

   agent: sonar_agent



conditional_task5:
    description: |
        Perform a code replacement of:
        {code_class}
        which is the original code in {path_class},
        because evidently there were errors in the refactored code from previous tasks. Therefore,
        restore the original code in the correct place.

    expected_output: >
        If the code replacement was successful, without returning the code.

    agent: code_replacer




conditional_task6:
    description: >
        You have received as input a list of SonarScanner errors from task4.
        Objective: provide a clear and concise textual summary of the main issues detected by Maven or Sonar.

    expected_output: |
        Return a JSON containing:
        - "valid": with the valid value returned from task4
        - "errors": a summary of task4 errors, such as:
          - [Error Type]: brief description and suggestion.
          - [Another Type]: ...
        IMPORTANT: the "valid" field in the output JSON must exactly match
        the "valid" from task4 without any modification.

    context:
       - task4

    agent: errors_summarizer


