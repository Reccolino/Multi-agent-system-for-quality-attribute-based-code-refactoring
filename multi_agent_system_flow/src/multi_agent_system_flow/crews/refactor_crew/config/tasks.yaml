task1:

    description: |
                Analyze the {code_class} carefully and create a precise and comprehensive prompt that 
                instructs an AI system or automated tool to evaluate source code, focusing on backstory of agent and, if possible, on:
                - Bad Practices (e.g., duplicated code, improper naming, code smells)
                - Correctness (compliance with style and logic rules)
                - Critical Security Issues (e.g., injection vulnerabilities, insecure APIs, buffer overflows).
    expected_output: >
                    A single, self-contained prompt in natural language, written in English, that clearly instructs 
                    another AI agent on how to improve the security of the given code. It should be suitable to use 
                    as direct input for a language model.
    agent: query_writer



task2:
    #description: >
     #     To refactor the code, without errors {errors} following the input of previous task
    description: |
          The agent takes the code and the prompt of previous task (task1) as input and makes code refactoring, following these lines:
          - preserve the structure, the number and ALL signatures of the original code's method and class name
          - non ripetere blocchi di codice. 
          - preserve ALL signature of constructors
          - do not change too much code
          - not make compilation and syntax errors {errors}
          - preserve all the relationships with other classes (inheritance, abstract classes, etc.) 
          - keep ALL comments (if some lines are comments there is a reason)
          - if there is, keep the licenses. If the class not contains licenses, DO NOT insert it a new
          - not include test cases
          - use UTF-8
          
          

    #description="You will be given code snippets or segments for improvement. "
    #           "Your task is to interact with the user when necessary to clarify context or requirements. "
    #          "Then, suggest clear, maintainable refactorings that preserve original functionality. "
    #         "Prioritize clarity and maintainability. When applicable, apply well-known design patterns. "
    #        "Optimize performance only if it doesn't compromise readability or introduce premature "
    #       "optimization issues. Identify and address potential errors and edge cases for robustness. "
    #      "For every improvement or change, provide concise, informative explanations detailing why"
    #     " the change is beneficial",
    expected_output: >
        Full Code refactoring
    context:
        - task1
    agent: code_refactor




task3:
    description: >
            Fai code replace in {path_class} del codice refattorizzato dalla task precedente.

    expected_output: >
            Se il code replace è andato a buon fine
    context:
      - task2
    agent: code_replace_agent



task4:
    description: >
           Esegui comandi da terminale passando al tool sonarscanner il {path_class}.

    expected_output: |
            Se lo scanner è andato a buon fine, senza restituire il codice e gli errori

    agent: sonar_agent



conditional_task5:
     description: >
            Fai code replace di {code_class}, ovvero il codice iniziale in {path_class},
            perchè, evidentemente, ci sono stati degli errori nel codice refattorizzato da task precedenti. Quindi
            riporta il codice iniziale nel posto giusto.

     expected_output: >
            Se il code replace è andato a buon fine, senza restituire il codice

     agent: code_replace_agent




conditional_task6:
     description: >
           Hai ricevuto in input una lista di errori SonarScanner provenienti dalla task4.
           **Obiettivo**: restituisci un riassunto chiaro e conciso dei principali problemi rilevati da Sonar
     expected_output: |
           Ritorna JSON con :
           - "valid" : con il valid restituito da task4
           - "errors" : il riassunto degli errori di task4, del tipo:
             - [Tipo di errore]: breve descrizione e suggerimento.
             - [Altro tipo]: ...
           **IMPORTANTE**: il campo `"valid"` nel JSON di output deve corrispondere
           senza alcuna modifica a valid di task4
     context:
       - task4
     agent: riassunto_errori


