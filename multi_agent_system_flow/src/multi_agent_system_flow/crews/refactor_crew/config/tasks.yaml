
task1:
  description: |
    You are MasterPrompt, a Static Analysis Expert focused on Java Bug Detection.

    Analyze the following Java source code:
    {code_class}
    
    Then create a **clear and actionable prompt** that will guide an AI tool to:
      1. Perform a full static analysis targeting **Bug-type issues** in:
         - **SonarQube**, prioritizing "Bugs"
         - **PMD**: Detect poor loop logic, null dereferences, faulty try/catch blocks
         - **SpotBugs**: Identify threading bugs, infinite loops, incorrect equals/hashCode use
         - **Checkstyle**: Find unreachable code or suspicious constructs
      2. Request identification of:
         - Logic bugs, state corruption issues, faulty comparisons
         - Null pointer risks, incorrect object lifecycle usage
         - API misuse, especially around collections and IO streams
      3. Focus on runtime correctness and edge-case stability
      4. Include instructions to **suggest corrections**, not perform them

  expected_output: |
    A single, concise English prompt that can be fed into a downstream AI agent
    for bug detection and remediation in Java. The prompt must:
      - Specify tools to use (SonarQube, PMD, SpotBugs, Checkstyle)
      - Focus only on **bugs**, not style or security
      - Include targeted instruction for issue identification and correction suggestions
      - Avoid modifying code; just guide analysis

  agent: query_writer

#----------------------------------------------RQ3 (SECURITY VULNERABILITIES)-------------------------------------------------------------#

# task1:
#   description: |
#     You are MasterPrompt, a Security-Centric Static Code Analysis Specialist.
#     Analyze the following Java source code:
#     {code_class}
#
#     Then create a **single, comprehensive English prompt** that:
#       1. Instructs an AI system to run a **security-focused static code scan** using:
#          - SonarQube with custom Quality Profiles that emphasize Vulnerabilities, Security Hotspots,
#            and Blocker/Critical issues.
#          - SpotBugs with the **FindSecurityBugs** plugin.
#          - PMD and Checkstyle for detecting risky patterns or non-compliant styles.
#       2. Maps all findings to **OWASP Top 10** vulnerabilities (e.g., A01:2021 - Broken Access Control,
#          A03:2021 - Injection).
#       3. Prioritizes findings based on **severity and exploitability**.
#       4. Recommends secure remediation strategies:
#          - Use of safe API alternatives (e.g., `PreparedStatement`)
#          - Input validation/sanitization
#          - Secure error handling
#          - Removal of insecure dependencies
#       5. Specifies that the output **must not include code changes**, but instead **instruct** another AI agent
#          on what to analyze and how to secure the code.
#
#   expected_output: |
#     A well-structured, security-focused prompt (in English) ready to be passed to a downstream AI model
#     that performs Java code review or refactoring. The prompt must:
#       - Target SonarQube and SpotBugs/FindSecurityBugs.
#       - Mention OWASP Top 10 mapping.
#       - Recommend secure remediation.
#       - Avoid verbose descriptions or generic statements.
#       - Be clear, actionable, and specific.
#
#   agent: query_writer

#--------------------------------------------------------------------------------------------------------------------------------#


#------------------------------------------------------RQ3 (CODE SMELLS)--------------------------------------------------------#


# task1:
#   description: |
#     You are MasterPrompt, a Static Code Analysis Expert specializing in **Code Smells**.
#     Analyze the following Java source code:
#     {code_class}
#
#     Create a comprehensive English prompt that instructs an AI system or automated tool to:
#     1. Run static code analysis focusing on code smells using:
#        - SonarQube Quality Profiles targeting maintainability, readability, complexity, and duplication.
#        - Checkstyle for style and naming consistency.
#        - PMD for detecting long methods, large classes, and unused code.
#        - FindBugs/SpotBugs for inefficiencies and resource leaks.
#     2. Identify and prioritize code smells such as duplicated code, long methods, large classes,
#        improper naming, dead code, and high cyclomatic complexity.
#     3. Recommend specific remediation steps:
#        - Refactor long methods into smaller, reusable units.
#        - Rename unclear or inconsistent identifiers.
#        - Remove redundant or unused code.
#        - Simplify complex conditional logic.
#        - Apply modularization and design patterns where applicable.
#     4. Produce a single, clear, actionable prompt (in English) that can be passed verbatim
#        to another AI agent for refactoring guidance.
#     5. Do not include direct code changes—only instructions and analysis guidance.
#
#   expected_output: |
#     A precise, well-structured English prompt that:
#     - Directs the AI to run SonarQube, Checkstyle, PMD, and SpotBugs scans focusing on code smells.
#     - Guides identification of common maintainability issues and complexity bottlenecks.
#     - Suggests concrete, maintainability-driven refactoring and cleanup actions.
#     - Is concise, clear, and ready for use by a downstream AI model for automated refactoring.
#
#   agent: query_writer

#--------------------------------------------------------------------------------------------------------------------------------#



#-----------------------------------------------------RQ1 / RQ2-------------------------------------------------------------------#

# task1:
#     # PER LA RQ2 DEVO CAMBIARE QUI E BACKSTORY AGENT, PER FAR SI CHE SI SPECIALIZZI PIU SU UN ATTRIBUTO
#     description: |
#         You are MasterPrompt, a Security-Focused Static Code Analysis Expert.
#         Analyze the following Java source code:
#         {code_class}
#         Then create a precise and comprehensive prompt that
#         instructs an AI system or automated tool to evaluate source code, focusing on backstory of agent and, if possible, on:
#         1. **Leverage SonarQube Quality Attributes**
#            - Examine Reliability, Security, Maintainability, Duplications and prioritize them metrics as
#              Vulnerabilities, Bugs and Code Smells.
#            - Bad Practices (e.g., duplicated code, improper naming, code smells)
#            - Correctness (compliance with style and logic rules)
#            - Critical And Blocker Issues
#         2. **Integrate Java Static-Analysis Plugins**
#            - Instruct how to run Checkstyle rules for naming conventions and style consistency.
#            - Include PMD scans for bug patterns (unused variables, inefficient loops, null‐dereferences).
#            - Include FindBugs (SpotBugs) checks for bytecode-level security defects (e.g., null‐pointer dereference, SQL injection annotations).
#         4. **Suggest Concrete Remediation Steps**
#            - Propose secure coding best practices (input validation, prepared statements, safe deserialization).
#         5. **Format and Output**
#            - The final output must be a single, clear prompt (in English) that can be provided verbatim to another AI model.
#            - Do not include code modifications yourself—only craft the instructions.

#     expected_output: |
#       A single, self-contained English prompt that:
#       - Clearly tells an AI agent how to run SonarQube and Java plugin scans (Checkstyle, PMD, FindBugs).
#       - Guides the AI to identify bad practices, code smells, style/logic inconsistencies, and critical security flaws (OWASP Top 10).
#       - Instructs the AI on remediation actions (secure APIs, input sanitization, configuration fixes, writing tests).

#     agent: query_writer

#-----------------------------------------------------------------------------------------------------------------------------#

task2:

    description: |
        You are MasterJava, a Java Code Refactoring Expert. 
        Refactor the {code_class}, using ONLY the prompt produced in task1 as guidance and absolutely according to these rules:
          1. **Preserve Structure: (IT'S IMPORTANT !!)**  
             - Keep ALL class and method names exactly as originally defined, including constructors and overloads.  
             - Retain ALL the original package declaration and ALL import statements.  
             - Do not change method signatures, parameter lists, return types.
             - Ensure that for every refactored method or class, the original logic and behavior remain identical (input → output). 
             - Preserve any license header if present. If no license is found in the original, do not add one.
             - Do not alter inheritance hierarchies, implemented interfaces, abstract class extensions, or annotations that affect class loading/behavior.
        
          2. **Changes:**  
             - Be AGGRESSIVE on code refactoring, following the prompt in task1 as refactoring rules
             - I want that you resolve the most problems of the code following context from task1
             - Only refactor code that directly addresses issues highlighted in the context from task1.  
             - Do not introduce any new compilation or runtime {errors}.  
             - Do not add test cases.
             - Add comments or a header at the top of the file when appropriate, if necessary.
             - Do not return things that are not code 

    expected_output: >
         Return only the full raw content of the .java file WITHOUT include ```java or ``` in the begin of Java file or other markdown.

    agent: code_refactor

    context:
      - task1




task3:
    description: >
            Do a code replace in: {path_class} using the refactored code from the previous task.

    expected_output: >
            If the code replacement was successful.
    context:
      - task2
    agent: code_replacer



task4:
   description: >
        Execute terminal commands passing the {path_class} to the SonarScanner tool.

   expected_output: |
        If the scanner completed successfully, without returning code or errors

   agent: sonar_agent



conditional_task5:
    description: |
        Perform a code replacement of:
        {code_class}
        which is the original code in {path_class},
        because evidently there were errors in the refactored code from previous tasks. Therefore,
        restore the original code in the correct place.

    expected_output: >
        If the code replacement was successful, without returning the code.

    agent: code_replacer




conditional_task6:
    description: >
        You have received as input a list of SonarScanner errors from task4.
        Objective: provide a clear and concise textual summary of the main issues detected by Maven or Sonar.

#here i must specify that the output must be JSON then i can take "valid" and "errors" camps
    expected_output: |
        Return a JSON containing:    
        - "valid": with the valid value returned from task4
        - "errors": do a summary of task4 errors, such as:
          - [Error Type]: brief description and suggestion.
          - [Another Type]: ...
        IMPORTANT: the "valid" field in the output JSON must exactly match
        the "valid" from task4 without any modification.

    context:
       - task4

    agent: errors_summarizer


