task1:
    #PER LA RQ2 DEVO CAMBIARE QUI E BACKSTORY AGENT, PER FAR SI CHE SI SPECIALIZZI PIU SU UN ATTRIBUTO
    description: |
        You are MasterPrompt, a Security-Focused Static Code Analysis Expert. 
        Analyze the following Java source code:
        {code_class}
      
        Then create a precise and comprehensive prompt that 
        instructs an AI system or automated tool to evaluate source code, focusing on backstory of agent and, if possible, on:

        1. **Leverage SonarQube Quality Attributes**  
           - Examine Reliability, Security, Maintainability, Duplications and prioritize them metrics as 
             Vulnerabilities, Bugs and Code Smells.  
           - Bad Practices (e.g., duplicated code, improper naming, code smells)
           - Correctness (compliance with style and logic rules)
           - Critical And Blocker Issues 
      
        2. **Integrate Java Static-Analysis Plugins**  
           - Instruct how to run Checkstyle rules for naming conventions and style consistency.  
           - Include PMD scans for bug patterns (unused variables, inefficient loops, null‐dereferences).  
           - Include FindBugs (SpotBugs) checks for bytecode-level security defects (e.g., null‐pointer dereference, SQL injection annotations).
    
        4. **Suggest Concrete Remediation Steps**  
           - Propose secure coding best practices (input validation, prepared statements, safe deserialization).  
    
        5. **Format and Output**  
           - The final output must be a single, clear prompt (in English) that can be provided verbatim to another AI model.  
           - Do not include code modifications yourself—only craft the instructions.  
           - Appendi **“###FINE”** esattamente alla fine del prompt per segnalare la conclusione.

    expected_output: |
      A single, self-contained English prompt that:
      - Clearly tells an AI agent how to run SonarQube and Java plugin scans (Checkstyle, PMD, FindBugs).  
      - Guides the AI to identify bad practices, code smells, style/logic inconsistencies, and critical security flaws (OWASP Top 10).  
      - Instructs the AI on remediation actions (secure APIs, input sanitization, configuration fixes, writing tests).  
      - Concludes with “###FINE” on its own line to stop further processing.

    agent: query_writer



task2:
    #ho notato che dando all'LLM comandi itemizzati, lui risponde meglio
    description: |
        You are MasterJava, a Java Code Refactoring Expert. 
        Refactor the {code_class}, using ONLY the prompt produced in task1 as guidance and absolutely according to these rules:
          1. **Preserve Structure: (IT'S IMPORTANT !!)**  
             - Keep ALL class and method names exactly as originally defined, including constructors and overloads.  
             - Retain ALL the original package declaration and ALL import statements.  
             - Do not change method signatures, parameter lists, return types.
             - Ensure that for every refactored method or class, the original logic and behavior remain identical (input → output). 
             - Preserve any license header if present. If no license is found in the original, do not add one.
             - Do not alter inheritance hierarchies, implemented interfaces, abstract class extensions, or annotations that affect class loading/behavior.
        
          2. **Changes:**  
             - Be aggressive on code refactoring: null dereferences, insecure inputs, code duplications, high cyclomatic complexity, etc. like SonarQube
             - I want that you resolve the most problems of the code
             - Only refactor code that directly addresses issues highlighted in task1.  
             - Do not introduce any new compilation or runtime {errors}.  
             - Do not add test cases.

    expected_output: >
         Return only the full raw content of the .java file WITHOUT include ```java or ``` in the begin of Java file or other markdown.

    agent: code_refactor

    context:
      - task1




task3:
    description: >
            Fai code replace in: {path_class} del codice refattorizzato dalla task precedente.

    expected_output: >
            Se il code replace è andato a buon fine
    context:
      - task2
    agent: code_replace_agent



task4:
    description: >
           Esegui comandi da terminale passando al tool sonarscanner il {path_class}.

    expected_output: |
            Se lo scanner è andato a buon fine, senza restituire il codice e gli errori

    agent: sonar_agent



conditional_task5:
     description: |
            Fai code replace di:
            {code_class}
            ovvero il codice iniziale in {path_class},
            perchè, evidentemente, ci sono stati degli errori nel codice refattorizzato da task precedenti. Quindi
            riporta il codice iniziale nel posto giusto.

     expected_output: >
            Se il code replace è andato a buon fine, senza restituire il codice.

     agent: code_replace_agent




conditional_task6:
     description: >
           Hai ricevuto in input una lista di errori SonarScanner provenienti dalla task4.
           **Obiettivo**: restituisci un riassunto chiaro e conciso dei principali problemi rilevati da Sonar
     expected_output: |
           Ritorna JSON con :
           - "valid" : con il valid restituito da task4
           - "errors" : il riassunto degli errori di task4, del tipo:
             - [Tipo di errore]: breve descrizione e suggerimento.
             - [Altro tipo]: ...
           **IMPORTANTE**: il campo `"valid"` nel JSON di output deve corrispondere
           senza alcuna modifica a valid di task4
     context:
       - task4
     agent: riassunto_errori


